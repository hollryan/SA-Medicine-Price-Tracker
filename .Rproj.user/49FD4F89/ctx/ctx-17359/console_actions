{
    "data" : [
        "\nR version 3.0.2 (2013-09-25) -- \"Frisbee Sailing\"\nCopyright (C) 2013 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(shiny)",
        "Warning message:\n",
        "package ‘shiny’ was built under R version 3.0.3 \n",
        "> ",
        "shinyUI(pageWithSidebar(",
        "+ ",
        "# Application title",
        "+ ",
        "headerPanel(\"Old Faithful Geyser Data\"),",
        "+ ",
        "# Sidebar with a slider input for number of bins",
        "+ ",
        "sidebarPanel(",
        "+ ",
        "sliderInput(\"bins\",",
        "+ ",
        "\"Number of bins:\",",
        "+ ",
        "min = 1,",
        "+ ",
        "max = 50,",
        "+ ",
        "value = 30)",
        "+ ",
        "),",
        "+ ",
        "# Show a plot of the generated distribution",
        "+ ",
        "mainPanel(",
        "+ ",
        "plotOutput(\"distPlot\")",
        "+ ",
        ")",
        "+ ",
        "))",
        "<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-sm-12\">\n      <h1>Old Faithful Geyser Data</h1>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-sm-4\">\n      <form class=\"well\">\n        <div class=\"form-group shiny-input-container\">\n          <label class=\"control-label\" for=\"bins\">Number of bins:</label>\n          <input class=\"js-range-slider\" id=\"bins\" data-min=\"1\" data-max=\"50\" data-from=\"30\" data-step=\"1\" data-grid=\"true\" data-grid-num=\"9.8\" data-grid-snap=\"false\" data-prettify-separator=\",\" data-keyboard=\"true\" data-keyboard-step=\"2.04081632653061\"/>\n        </div>\n      </form>\n    </div>\n    <div class=\"col-sm-8\">\n      <div id=\"distPlot\" class=\"shiny-plot-output\" style=\"width: 100% ; height: 400px\"></div>\n    </div>\n  </div>\n</div>",
        " \n",
        "> ",
        "library(shiny)",
        "> ",
        "shinyServer(function(input, output) {",
        "+ ",
        "output$distPlot <- renderPlot({",
        "+ ",
        "# generate bins based on input$bins from ui.R",
        "+ ",
        "x    <- faithful[, 2]",
        "+ ",
        "bins <- seq(min(x), max(x), length.out = input$bins + 1)",
        "+ ",
        "# draw the histogram with the specified number of bins",
        "+ ",
        "hist(x, breaks = bins, col = 'darkgray', border = 'white')",
        "+ ",
        "})",
        "+ ",
        "})",
        "> ",
        "library(shiny)",
        "> ",
        "runApp(\"my_app\")",
        "Error in shinyAppDir(x) : \n  No Shiny application exists at the path \"my_app\"\n",
        "> ",
        "runApp(\"SA Medicine Price Tracker\")\"",
        "+ ",
        "\n",
        "> ",
        "runApp(\"SA Medicine Price Tracker\")",
        "Error in shinyAppDir(x) : \n  No Shiny application exists at the path \"SA Medicine Price Tracker\"\n",
        "> ",
        "getwd()",
        "[1] \"C:/Users/Ryan/Google Drive/inScisive/SA Medicine Price Tracker\"\n",
        "> ",
        "runApp",
        "function (appDir = getwd(), port = NULL, launch.browser = getOption(\"shiny.launch.browser\", \n    interactive()), host = getOption(\"shiny.host\", \"127.0.0.1\"), \n    workerId = \"\", quiet = FALSE, display.mode = c(\"auto\", \"normal\", \n        \"showcase\")) \n{\n    on.exit({\n        handlerManager$clear()\n    }, add = TRUE)\n    if (is.null(host) || is.na(host)) \n        host <- \"0.0.0.0\"\n    ops <- options(warn = 1)\n    on.exit(options(ops), add = TRUE)\n    workerId(workerId)\n    if (nzchar(Sys.getenv(\"SHINY_PORT\"))) {\n",
        "        ver <- Sys.getenv(\"SHINY_SERVER_VERSION\")\n        if (compareVersion(ver, .shinyServerMinVersion) < 0) {\n            warning(\"Shiny Server v\", .shinyServerMinVersion, \n                \" or later is required; please upgrade!\")\n        }\n    }\n    setShowcaseDefault(0)\n    if (is.character(appDir)) {\n        desc <- file.path.ci(appDir, \"DESCRIPTION\")\n        if (file.exists(desc)) {\n            con <- file(desc, encoding = checkEncoding(desc))\n            on.exit(close(con), add = TRUE)\n            settings <- read.dcf(con)\n",
        "            if (\"DisplayMode\" %in% colnames(settings)) {\n                mode <- settings[1, \"DisplayMode\"]\n                if (mode == \"Showcase\") {\n                  setShowcaseDefault(1)\n                }\n            }\n        }\n    }\n    display.mode <- match.arg(display.mode)\n    if (display.mode == \"normal\") \n        setShowcaseDefault(0)\n    else if (display.mode == \"showcase\") \n        setShowcaseDefault(1)\n    require(shiny)\n    if (is.null(port)) {\n        for (i in 1:20) {\n            if (!is.null(.globals$lastPort)) {\n",
        "                port <- .globals$lastPort\n                .globals$lastPort <- NULL\n            }\n            else {\n                port <- p_randomInt(3000, 8000)\n            }\n            tmp <- try(startServer(host, port, list()), silent = TRUE)\n            if (!inherits(tmp, \"try-error\")) {\n                stopServer(tmp)\n                .globals$lastPort <- port\n                break\n            }\n        }\n    }\n    appParts <- as.shiny.appobj(appDir)\n    if (!is.null(appParts$onStart)) \n        appParts$onStart()\n",
        "    if (!is.null(appParts$onEnd)) \n        on.exit(appParts$onEnd(), add = TRUE)\n    server <- startApp(appParts, port, host, quiet)\n    on.exit({\n        stopServer(server)\n    }, add = TRUE)\n    if (!is.character(port)) {\n        browseHost <- if (identical(host, \"0.0.0.0\")) \n            \"127.0.0.1\"\n        else host\n        appUrl <- paste(\"http://\", browseHost, \":\", port, sep = \"\")\n        if (is.function(launch.browser)) \n            launch.browser(appUrl)\n        else if (launch.browser) \n            utils::browseURL(appUrl)\n",
        "    }\n    else {\n        appUrl <- NULL\n    }\n    callAppHook(\"onAppStart\", appUrl)\n    on.exit({\n        callAppHook(\"onAppStop\", appUrl)\n    }, add = TRUE)\n    .globals$retval <- NULL\n    .globals$stopped <- FALSE\n    shinyCallingHandlers(while (!.globals$stopped) {\n        serviceApp()\n        Sys.sleep(0.001)\n    })\n    return(.globals$retval)\n}\n<environment: namespace:shiny>\n",
        "> ",
        "runApp(\"myapp\")",
        "\nListening on http://127.0.0.1:4193\n",
        "\n",
        "> ",
        "runApp(\"tracker\")",
        "\nListening on http://127.0.0.1:4193\n",
        "\n",
        "> ",
        "runApp(\"tracker\")",
        "\nListening on http://127.0.0.1:4193\n",
        "\n",
        "> ",
        "runApp(\"tracker\")",
        "\nListening on http://127.0.0.1:4193\n",
        "\n",
        "> ",
        "runApp(\"tracker\")",
        "\nListening on http://127.0.0.1:4193\n",
        "\n",
        "> ",
        "runApp(\"tracker\")",
        "\nListening on http://127.0.0.1:4193\n",
        "\n",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        2
    ]
}